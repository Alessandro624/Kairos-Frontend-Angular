/**
 * Kairos Backend API
 * This API provides endpoints for the Kairos Backend application.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { PageStructureDTO } from '../model/pageStructureDTO';
import { ServiceError } from '../model/serviceError';
import { StructureCreateDTO } from '../model/structureCreateDTO';
import { StructureDTO } from '../model/structureDTO';
import { StructureDetailsDTO } from '../model/structureDetailsDTO';
import { StructureFilterDTO } from '../model/structureFilterDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class StructureControllerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createStructure(body: StructureCreateDTO, observe?: 'body', reportProgress?: boolean): Observable<StructureDTO>;
    public createStructure(body: StructureCreateDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StructureDTO>>;
    public createStructure(body: StructureCreateDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StructureDTO>>;
    public createStructure(body: StructureCreateDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createStructure.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<StructureDTO>('post',`${this.basePath}/api/structures`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteStructure(id: any, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteStructure(id: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteStructure(id: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteStructure(id: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteStructure.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/structures/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param structureFilterDTO 
     * @param page 
     * @param size 
     * @param sortBy 
     * @param direction 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllPreviewStructures(structureFilterDTO: StructureFilterDTO, page?: any, size?: any, sortBy?: any, direction?: any, observe?: 'body', reportProgress?: boolean): Observable<PageStructureDTO>;
    public getAllPreviewStructures(structureFilterDTO: StructureFilterDTO, page?: any, size?: any, sortBy?: any, direction?: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageStructureDTO>>;
    public getAllPreviewStructures(structureFilterDTO: StructureFilterDTO, page?: any, size?: any, sortBy?: any, direction?: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageStructureDTO>>;
    public getAllPreviewStructures(structureFilterDTO: StructureFilterDTO, page?: any, size?: any, sortBy?: any, direction?: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (structureFilterDTO === null || structureFilterDTO === undefined) {
            throw new Error('Required parameter structureFilterDTO was null or undefined when calling getAllPreviewStructures.');
        }





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }
        if (structureFilterDTO !== undefined && structureFilterDTO !== null) {
            queryParameters = queryParameters.set('structureFilterDTO', <any>structureFilterDTO);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PageStructureDTO>('get',`${this.basePath}/api/structures`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSectorsByStructureId(id: any, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getSectorsByStructureId(id: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getSectorsByStructureId(id: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getSectorsByStructureId(id: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getSectorsByStructureId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/structures/${encodeURIComponent(String(id))}/sectors`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStructureDetails(id: any, observe?: 'body', reportProgress?: boolean): Observable<StructureDetailsDTO>;
    public getStructureDetails(id: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StructureDetailsDTO>>;
    public getStructureDetails(id: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StructureDetailsDTO>>;
    public getStructureDetails(id: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getStructureDetails.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<StructureDetailsDTO>('get',`${this.basePath}/api/structures/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
