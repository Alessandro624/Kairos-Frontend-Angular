/**
 * Kairos Backend API
 * This API provides endpoints for the Kairos Backend application.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { PageWishlistDTO } from '../model/pageWishlistDTO';
import { ServiceError } from '../model/serviceError';
import { WishlistCreateDTO } from '../model/wishlistCreateDTO';
import { WishlistDTO } from '../model/wishlistDTO';
import { WishlistFilterDTO } from '../model/wishlistFilterDTO';
import { WishlistUpdateDTO } from '../model/wishlistUpdateDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class WishlistControllerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param wishlistId 
     * @param eventId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addEventToWishlist(wishlistId: any, eventId: any, observe?: 'body', reportProgress?: boolean): Observable<WishlistDTO>;
    public addEventToWishlist(wishlistId: any, eventId: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WishlistDTO>>;
    public addEventToWishlist(wishlistId: any, eventId: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WishlistDTO>>;
    public addEventToWishlist(wishlistId: any, eventId: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (wishlistId === null || wishlistId === undefined) {
            throw new Error('Required parameter wishlistId was null or undefined when calling addEventToWishlist.');
        }

        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling addEventToWishlist.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<WishlistDTO>('post',`${this.basePath}/v1/auth/${encodeURIComponent(String(wishlistId))}/events/${encodeURIComponent(String(eventId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param wishlistId 
     * @param userId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addUserToWishlist(wishlistId: any, userId: any, observe?: 'body', reportProgress?: boolean): Observable<WishlistDTO>;
    public addUserToWishlist(wishlistId: any, userId: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WishlistDTO>>;
    public addUserToWishlist(wishlistId: any, userId: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WishlistDTO>>;
    public addUserToWishlist(wishlistId: any, userId: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (wishlistId === null || wishlistId === undefined) {
            throw new Error('Required parameter wishlistId was null or undefined when calling addUserToWishlist.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling addUserToWishlist.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<WishlistDTO>('post',`${this.basePath}/v1/auth/${encodeURIComponent(String(wishlistId))}/users/${encodeURIComponent(String(userId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param creatorId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public countWishlistsByCreator(creatorId: any, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public countWishlistsByCreator(creatorId: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public countWishlistsByCreator(creatorId: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public countWishlistsByCreator(creatorId: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (creatorId === null || creatorId === undefined) {
            throw new Error('Required parameter creatorId was null or undefined when calling countWishlistsByCreator.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/v1/auth/creators/${encodeURIComponent(String(creatorId))}/count`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createWishlist(body: WishlistCreateDTO, observe?: 'body', reportProgress?: boolean): Observable<WishlistDTO>;
    public createWishlist(body: WishlistCreateDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WishlistDTO>>;
    public createWishlist(body: WishlistCreateDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WishlistDTO>>;
    public createWishlist(body: WishlistCreateDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createWishlist.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<WishlistDTO>('post',`${this.basePath}/v1/auth`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param wishlistId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteWishlist(wishlistId: any, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteWishlist(wishlistId: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteWishlist(wishlistId: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteWishlist(wishlistId: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (wishlistId === null || wishlistId === undefined) {
            throw new Error('Required parameter wishlistId was null or undefined when calling deleteWishlist.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/v1/auth/${encodeURIComponent(String(wishlistId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param wishlistId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWishlistById(wishlistId: any, observe?: 'body', reportProgress?: boolean): Observable<WishlistDTO>;
    public getWishlistById(wishlistId: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WishlistDTO>>;
    public getWishlistById(wishlistId: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WishlistDTO>>;
    public getWishlistById(wishlistId: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (wishlistId === null || wishlistId === undefined) {
            throw new Error('Required parameter wishlistId was null or undefined when calling getWishlistById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<WishlistDTO>('get',`${this.basePath}/v1/auth/${encodeURIComponent(String(wishlistId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param page 
     * @param size 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWishlists(body: WishlistFilterDTO, page: any, size: any, observe?: 'body', reportProgress?: boolean): Observable<PageWishlistDTO>;
    public getWishlists(body: WishlistFilterDTO, page: any, size: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageWishlistDTO>>;
    public getWishlists(body: WishlistFilterDTO, page: any, size: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageWishlistDTO>>;
    public getWishlists(body: WishlistFilterDTO, page: any, size: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling getWishlists.');
        }

        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling getWishlists.');
        }

        if (size === null || size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling getWishlists.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<PageWishlistDTO>('post',`${this.basePath}/v1/auth/filter`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param wishlistId 
     * @param eventId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeEventFromWishlist(wishlistId: any, eventId: any, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeEventFromWishlist(wishlistId: any, eventId: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeEventFromWishlist(wishlistId: any, eventId: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeEventFromWishlist(wishlistId: any, eventId: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (wishlistId === null || wishlistId === undefined) {
            throw new Error('Required parameter wishlistId was null or undefined when calling removeEventFromWishlist.');
        }

        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling removeEventFromWishlist.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/v1/auth/${encodeURIComponent(String(wishlistId))}/events/${encodeURIComponent(String(eventId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param wishlistId 
     * @param userId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeUserFromWishlist(wishlistId: any, userId: any, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeUserFromWishlist(wishlistId: any, userId: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeUserFromWishlist(wishlistId: any, userId: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeUserFromWishlist(wishlistId: any, userId: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (wishlistId === null || wishlistId === undefined) {
            throw new Error('Required parameter wishlistId was null or undefined when calling removeUserFromWishlist.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling removeUserFromWishlist.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/v1/auth/${encodeURIComponent(String(wishlistId))}/users/${encodeURIComponent(String(userId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param wishlistId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateWishlist(body: WishlistUpdateDTO, wishlistId: any, observe?: 'body', reportProgress?: boolean): Observable<WishlistDTO>;
    public updateWishlist(body: WishlistUpdateDTO, wishlistId: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WishlistDTO>>;
    public updateWishlist(body: WishlistUpdateDTO, wishlistId: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WishlistDTO>>;
    public updateWishlist(body: WishlistUpdateDTO, wishlistId: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateWishlist.');
        }

        if (wishlistId === null || wishlistId === undefined) {
            throw new Error('Required parameter wishlistId was null or undefined when calling updateWishlist.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<WishlistDTO>('put',`${this.basePath}/v1/auth/${encodeURIComponent(String(wishlistId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param creatorId 
     * @param name 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public wishlistAlreadyExists(creatorId: any, name: any, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public wishlistAlreadyExists(creatorId: any, name: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public wishlistAlreadyExists(creatorId: any, name: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public wishlistAlreadyExists(creatorId: any, name: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (creatorId === null || creatorId === undefined) {
            throw new Error('Required parameter creatorId was null or undefined when calling wishlistAlreadyExists.');
        }

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling wishlistAlreadyExists.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (creatorId !== undefined && creatorId !== null) {
            queryParameters = queryParameters.set('creatorId', <any>creatorId);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/v1/auth/exists`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
