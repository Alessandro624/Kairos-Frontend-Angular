/**
 * Kairos Backend API
 * This API provides endpoints for the Kairos Backend application.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {
  HttpClient, HttpHeaders, HttpResponse, HttpEvent
} from '@angular/common/http';

import {BehaviorSubject, catchError, finalize, from, Observable, switchMap, tap, throwError, timer} from 'rxjs';

import {AuthRequest} from '../model/authRequest';
import {AuthResponse} from '../model/authResponse';
import {PasswordResetConfirmation} from '../model/passwordResetConfirmation';
import {PasswordResetRequest} from '../model/passwordResetRequest';
import {UserCreateDTO} from '../model/userCreateDTO';

import {BASE_PATH} from '../variables';
import {Configuration} from '../configuration';


@Injectable()
export class AuthenticationService {

  protected basePath = 'http://localhost:8080';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  private accessTokenKey: string = "token";
  private authTokenExpiryKey: string = "auth_token_expiry";
  private refreshTokenKey: string = "refresh_token";
  private isAuthenticatedSubject = new BehaviorSubject<boolean>(this.isTokenCurrentlyValid());
  private userRoleSubject = new BehaviorSubject<any | null>(this.getStoredUserRole());
  private isRefreshingToken = false;
  private refreshTokenPromise: Promise<AuthResponse> | null = null;
  private refreshTimer: any;

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
    this.scheduleTokenRefresh();
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }


  /**
   * Request password reset
   * Initiates the password reset process by sending a reset link to the user&#x27;s email if the user exists.
   * @param body User&#x27;s username or email
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public forgotPassword(body: PasswordResetRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public forgotPassword(body: PasswordResetRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public forgotPassword(body: PasswordResetRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public forgotPassword(body: PasswordResetRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling forgotPassword.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json',
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<any>('post', `${this.basePath}/v1/auth/forgot-password`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Login user
   * Authenticates a user and returns JWT and refresh tokens.
   * @param body Authentication request with username/email and password
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public login(body: AuthRequest, observe?: 'body', reportProgress?: boolean): Observable<AuthResponse>;
  public login(body: AuthRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthResponse>>;
  public login(body: AuthRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthResponse>>;
  public login(body: AuthRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling login.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json',
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<AuthResponse>('post', `${this.basePath}/v1/auth/login`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * OAuth2 login failure message
   * Endpoint to indicate a failed OAuth2 login attempt.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public oAuth2LoginFailure(observe?: 'body', reportProgress?: boolean): Observable<any>;
  public oAuth2LoginFailure(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public oAuth2LoginFailure(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public oAuth2LoginFailure(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json',
      'text/plain',
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<any>('get', `${this.basePath}/v1/auth/oauth2/login/failure`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Refresh JWT token
   * Refreshes the JWT token using a valid refresh token.
   * @param body Refresh token
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public refresh(body: any, observe?: 'body', reportProgress?: boolean): Observable<AuthResponse>;
  public refresh(body: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthResponse>>;
  public refresh(body: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthResponse>>;
  public refresh(body: any, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling refresh.');
    }

    let headers = this.defaultHeaders;

    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json',
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'text/plain'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<AuthResponse>('post', `${this.basePath}/v1/auth/refresh`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Register new user
   * Registers a new user account.
   * @param body User registration details (username, email, password)
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public register(body: UserCreateDTO, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public register(body: UserCreateDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public register(body: UserCreateDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public register(body: UserCreateDTO, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling register.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json',
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<any>('post', `${this.basePath}/v1/auth/register`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Confirm password reset
   * Resets the user&#x27;s password using a valid reset token.
   * @param body New password and the reset token
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public resetPassword(body: PasswordResetConfirmation, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public resetPassword(body: PasswordResetConfirmation, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public resetPassword(body: PasswordResetConfirmation, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public resetPassword(body: PasswordResetConfirmation, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (body === null || body === undefined) {
      throw new Error('Required parameter body was null or undefined when calling resetPassword.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json',
      '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<any>('post', `${this.basePath}/v1/auth/reset-password`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  public loginWithGoogle(): void {
    window.location.href = `${this.basePath}/v1/auth/oauth2/authorize/google?redirect_uri=http://localhost:4200/auth/callback`;
  }

  public loginWithKeycloak(): void {
    window.location.href = `${this.basePath}/v1/auth/oauth2/authorize/keycloak?redirect_uri=http://localhost:4200/auth/callback`;
  }

  decodeJwt(token: string): any | null {
    try {
      const base64Url = token.split('.')[1];
      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
      const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
      }).join(''));

      return JSON.parse(jsonPayload);
    } catch (e) {
      console.error('Error during decoding of the JWT token:', e);
      return null;
    }
  }

  extractExpirationDate(token: string): Date | null {
    const decoded = this.decodeJwt(token);
    if (decoded && decoded.exp) {
      return new Date(decoded.exp * 1000);
    } else {
      return null;
    }
  }

  extractRoles(token: string) {
    const decoded = this.decodeJwt(token);
    if (decoded && decoded.roles) {
      return decoded.roles;
    }
  }

  isTokenExpired(expiryDateString: string): boolean {
    try {
      const expiryDate = new Date(expiryDateString);
      const now = new Date();
      return expiryDate <= now;
    } catch (e) {
      console.error('Error parsing expiry date from localStorage:', e);
      return true;
    }
  }

  setTokens(accessToken: string, refreshToken: string): void {
    localStorage.setItem(this.accessTokenKey, accessToken);
    localStorage.setItem(this.refreshTokenKey, refreshToken);
    const authExpiresAt = this.extractExpirationDate(accessToken);

    if (!authExpiresAt) {
      console.warn('Invalid claim "exp" in JWT token. Cannot set expiry date.');
      this.logout();
      return;
    }

    localStorage.setItem(this.authTokenExpiryKey, authExpiresAt.toISOString());
    this.isAuthenticatedSubject.next(this.isTokenCurrentlyValid());
    this.userRoleSubject.next(this.getStoredUserRole());
    this.scheduleTokenRefresh();
  }

  logout(): void {
    localStorage.removeItem(this.accessTokenKey);
    localStorage.removeItem(this.refreshTokenKey);
    localStorage.removeItem(this.authTokenExpiryKey);
    this.isAuthenticatedSubject.next(false);
    this.userRoleSubject.next(null);

    if (this.refreshTimer) {
      clearTimeout(this.refreshTimer);
      this.refreshTimer = null;
    }

    this.isRefreshingToken = false;
    this.refreshTokenPromise = null;
  }

  private isTokenCurrentlyValid(): boolean {
    const token = localStorage.getItem(this.accessTokenKey);
    const expiryDateString = localStorage.getItem(this.authTokenExpiryKey);

    if (!token || !expiryDateString) {
      return false;
    }

    return !this.isTokenExpired(expiryDateString);
  }

  isAuthenticated(): Observable<boolean> {
    return this.isAuthenticatedSubject.asObservable();
  }

  getUserRole(): Observable<any | null> {
    return this.userRoleSubject.asObservable();
  }

  public refreshAccessToken(): Observable<AuthResponse> {
    const refreshToken = localStorage.getItem(this.refreshTokenKey);

    if (!refreshToken) {
      console.warn('No refresh token available. Logging out.');
      this.logout();
      return throwError(() => new Error('No refresh token available.'));
    }

    const expiryRefreshTokenDate = this.extractExpirationDate(refreshToken);

    if (!expiryRefreshTokenDate || this.isTokenExpired(expiryRefreshTokenDate.toISOString())) {
      console.warn('Refresh token expired. Logging out.');
      this.logout();
      return throwError(() => new Error('Refresh token expired.'));
    }

    if (this.isRefreshingToken && this.refreshTokenPromise) {
      return from(this.refreshTokenPromise);
    }

    this.isRefreshingToken = true;
    this.refreshTokenPromise = new Promise<AuthResponse>((resolve, reject) => {
      this.refresh(refreshToken).pipe(
        tap(response => {
          this.setTokens(response.token, response.refreshToken);
          resolve(response);
        }),
        catchError(error => {
          console.error('Refresh token failed:', error);
          this.logout();
          reject(error);
          return throwError(() => new Error('Refresh token failed: ' + (error.error?.message || error.message)));
        }),
        finalize(() => {
          this.isRefreshingToken = false;
          this.refreshTokenPromise = null;
        })
      ).subscribe();
    });

    return from(this.refreshTokenPromise);
  }

  private scheduleTokenRefresh(): void {
    if (this.refreshTimer) {
      clearTimeout(this.refreshTimer);
      this.refreshTimer = null;
    }

    const token = localStorage.getItem(this.accessTokenKey);
    const expiryDateString = localStorage.getItem(this.authTokenExpiryKey);
    const refreshToken = localStorage.getItem(this.refreshTokenKey);

    if (!token || !expiryDateString) {
      console.log('No access token or expiry date found to schedule refresh.');
      this.logout();
      return;
    }

    try {
      const decoded = this.decodeJwt(token)!;
      const expirationTimeMs = decoded.exp * 1000;
      const now = Date.now();

      const refreshBufferMs = 5 * 60 * 1000;

      let refreshInMs = expirationTimeMs - now - refreshBufferMs;

      if (refreshInMs <= 10 * 1000) {
        console.log('Token is already expired or very close to expiration (within buffer). Attempting immediate refresh.');

        if (!this.isRefreshingToken && refreshToken) {
          this.refreshAccessToken().subscribe({
            next: () => console.log('Immediate token refresh successful.'),
            error: (err) => console.error('Immediate token refresh failed:', err)
          });
        } else {
          console.log('Immediate refresh not performed: A refresh is already in progress or no refresh token.');
          if (!refreshToken) {
            this.logout();
          }
        }
      } else {
        console.log(`Scheduling token refresh in ${Math.ceil(refreshInMs / 1000)} seconds.`);
        this.refreshTimer = timer(refreshInMs).pipe(
          switchMap(() => this.refreshAccessToken()),
          catchError(err => {
            console.warn('Error refresh token:', err);

            return throwError(() => err);
          })
        ).subscribe();
      }
    } catch (e) {
      console.error('Error during decoding for refresh token:', e);
      this.logout();
    }
  }

  private getStoredUserRole() {
    const token = localStorage.getItem(this.accessTokenKey)?.toString() || '';
    if (!token) {
      return null;
    }
    return this.extractRoles(token);
  }
}
